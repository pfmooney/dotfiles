" Preamble --------------------------------------------------------------- {{{

set nocompatible

set runtimepath+=~/.vim/bundle/neobundle.vim/

filetype off
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" Eye candy
NeoBundle 'pfmooney/vim-pmolokai', 'c3a0477fd7ac91bd9a4983ba1f1f472315c05a10'
NeoBundle 'itchyny/lightline.vim', '9f4f2284cc26939eb597f70cc819c1db5d579cc8'

" Language support
NeoBundle 'mmalecki/vim-node.js', '6f48575e748c22ccb3782bc02eb319b2b1b0f85d'
NeoBundle 'saltstack/salt-vim', '6ca9e3500cc39dd417b411435d58a1b720b331cc'

" Utilties
NeoBundle 'scrooloose/nerdtree', '72c3656799289d4635520c28e17f737066ce19d6'
NeoBundle 'tpope/vim-fugitive', '8bf74ceef3659a9e5201dbc90a27f037b8f97908'
NeoBundle 'vim-utils/vim-man', 'cfdc78f52707b4df76cbe57552a7c8c28a390da4'
NeoBundle 'ctrlpvim/ctrlp.vim', 'bde7a2950adaa82e894d7bdf69e3e7383e40d229'

call neobundle#end()
filetype plugin indent on

NeoBundleCheck

" }}}

" General Settings ------------------------------------------------------- {{{

set nobackup            " don't create backup files
set ruler               " display the cursor position
set nohlsearch          " don't highlight search terms
set bs=2                " allow useful backspace in insert mode
set nomodeline          " Disable modelines for security
set diffopt+=vertical   " Default to vsplits for vimdiff

" Better line-joining behavior (especially inside comments)
if v:version > 703
	set fo+=j
endif

" Leader {{{
"
let mapleader = ","
let maplocalleader = "\\"

" }}}

" Tabs and indenting {{{

set tabstop=4
set shiftwidth=4
set shiftround

" Enable fun indenting/functions
set nosi
set autoindent

" }}}

" Vim Tabs {{{

nnoremap tl :tabnext<CR>
nnoremap th :tabprev<CR>
nnoremap tf :tabfirst<CR>
nnoremap tg :tablast<CR>
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>

" }}}

" Color/style {{{

colorscheme pmolokai
set bg=dark             " black terminal background
syntax on               " syntax highlighting is what the cool kids do
set synmaxcol=800       " Don't try to highlight lines longer than 800 chars.

" Line numbers are nice
set nu


" Draw a nice guide at 80 cols
if exists('+colorcolumn')
	set colorcolumn=80
endif

" }}}

" Folding {{{

" map space-bar to toggle folding
noremap <space> za

function! MyFoldText() " {{{
	let line = getline(v:foldstart)

	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth
	let foldedlinecount = 1 + v:foldend - v:foldstart

	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')

	let linemsg = '…[' . foldedlinecount . ']'
	let linelimit = (windowwidth  > 80) ? (80 - len(linemsg)) : (windowwidth - len(linemsg))
	let line = strpart(line, 0, linelimit)
	return line . repeat(' ', 80 - len(line) - len(linemsg)) . linemsg
endfunction " }}}
set foldtext=MyFoldText()

" }}}

" Character Listing {{{

set list
"set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set listchars=tab:\>\-
set fillchars=fold:\ ,vert:\|


augroup trailing
	au!
	au BufReadPre * :match ErrorMsg '\s\+$'
	au InsertEnter * :highlight clear ErrorMsg
	au InsertLeave * :highlight ErrorMsg term=reverse cterm=reverse ctermfg=124 guifg=White guibg=Red
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.sw?                            " Vim swap files

set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" }}}

" Line Return {{{

" Return to line conditional on g_file_line_return
fun! File_line_return()
	if exists('b:file_line_return') && b:file_line_return != 1
		return
	endif
	if line("'\"") > 0 && line("'\"") <= line("$") |
		execute 'normal! g`"zvzz' |
	endif
endfunction

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
	au!
	au BufReadPost * call File_line_return()
augroup END

" }}}

" Terminal settings {{{

set ttyfast
set lazyredraw

" support 256 color terminals
if &term =~ "xterm" || &term =~ "256color"
	set t_Co=256
endif

" }}}

" Key Binding Overrides {{{

" reset foldmethod and redraw screen when folding is hosed
nnoremap <C-L> :let &fdm = &fdm<CR>:redraw!<CR>

" }}}

" QuickFix Overrides {{{

" Support jsstyle/cstyle output
set efm+=%f:\ %l:%m

" }}}

" CTags {{{

set tags=./tags;~/

" }}}


" }}}

" Plugin Settings ------------------------------------------------------- {{{

" lightline {{{

" always show
set laststatus=2
" See statusline for lineinfo documentation
let g:lightline = {
	\ 'colorscheme': 'one',
	\ 'component': {
		\ 'lineinfo': '%3l:%-5(%c%V%)'
	\ },
	\ 'mode_map': {
		\ 'n' : 'NORM',
		\ 'i' : 'INS ',
		\ 'R' : 'REP ',
		\ 'v' : 'VIS ',
		\ 'V' : 'V-L ',
		\ "\<C-v>": 'V-B ',
		\ 'c' : 'COMM',
		\ 's' : 'SEL ',
		\ 'S' : 'S-L ',
		\ "\<C-s>": 'S-B ',
		\ 't': 'TERM',
	\ }
\ }

" }}}

" ctrlp {{{

if executable('ag')
  " Use ag over grep
  " set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'

  " ag is normall fast enough that CtrlP doesn't need to cache
  " Projects like illumos and freebsd break that notion
  " let g:ctrlp_use_caching = 0
  let g:ctrlp_clear_cache_on_exit = 0
endif

" }}}

" }}}

" Filetype-specific ------------------------------------------------------ {{{

" C {{{

augroup ft_c
	au!

	" Don't fold comments or '#if 0' blocks
	let c_no_comment_fold = 1
	let c_no_if0_fold = 1

	au FileType c setlocal foldmethod=syntax
	au FileType c setlocal list!
	" shiftround messes with block comments and illumos continuation style
	au FileType c setlocal noshiftround
	au FileType c setlocal ts=8 sw=8 list

augroup END

" }}}
"
" C++ {{{

augroup ft_cpp
	au!

	" Mirror settings for C
	au FileType cpp setlocal foldmethod=marker foldmarker={,}
	au FileType cpp setlocal list!
	au FileType cpp setlocal noshiftround
	au FileType cpp setlocal ts=8 sw=8 list

augroup END

" }}}

" Javascript {{{

augroup ft_javascript
	au!

	" Highlight json files as javascript
	au BufRead,BufNewFile *.json set filetype=javascript

	au Filetype javascript call JavaScriptFold()
	au Filetype javascript setlocal tabstop=2
	au Filetype javascript setlocal shiftwidth=2
	au Filetype javascript setlocal expandtab

augroup END

" }}}

" Git Commit {{{

augroup ft_gitcommit
	au!

	" Don't bother with listchars in git commit messages
	au FileType gitcommit setlocal list!
	" Start off on the first line
	au FileType gitcommit let b:file_line_return=0

augroup END

" }}}

" Go {{{

augroup ft_go
	au!

	au FileType go setlocal foldmethod=syntax

augroup END

" }}}

" Mail {{{
augroup ft_mail
	au!

	" Enable line-folding (and don't highlight the trailing spaces)
	au FileType mail setlocal fo+=w
	au FileType mail :match none
	au FileType mail setlocal spell

augroup END

" }}}

" Makefile {{{

augroup ft_make
	au!

	" Several suffixes are used for Makefiles in illumos
	au BufRead,BufNewFile Makefile.* set filetype=make

	au FileType make setlocal ts=8

augroup END

" }}}

" Markdown {{{

	au BufRead,BufNewFile *.md set filetype=markdown
	au BufRead,BufNewFile *.restdown set filetype=markdown

" }}}

" muttrc {{{

augroup ft_muttrc
	au!

	au Filetype muttrc setlocal foldmethod=marker

augroup END

" }}}

" Puppet {{{

augroup ft_puppet
	au!

	au Filetype puppet setlocal foldmethod=marker
	au Filetype puppet setlocal foldmarker={,}
	" Conform to style guide for spaces/tabs
	au Filetype puppet setlocal tabstop=2
	au Filetype puppet setlocal shiftwidth=2
	au Filetype puppet setlocal expandtab
	" perform correct tabbing for => lists
	au Filetype puppet AddTabularPattern! block /^[^=]*\zs=>

	au Filetype puppet let g:syntastic_puppet_lint_arguments=
\'--no-class_parameter_defaults-check ' .
\'--no-documentation-check ' .
\'--no-autoloader_layout-check '
augroup END

" }}}

" Ruby {{{

augroup ft_ruby
	au!

	au Filetype ruby setlocal foldmethod=syntax
	" Conform to style guide for spaces/tabs
	au Filetype ruby setlocal tabstop=2
	au Filetype ruby setlocal shiftwidth=2
	au Filetype ruby setlocal expandtab

" }}}

" eRuby {{{

augroup ft_eruby
	au!

	au Filetype eruby setlocal foldmethod=syntax
	" Conform to style guide for spaces/tabs
	au Filetype eruby setlocal tabstop=2
	au Filetype eruby setlocal shiftwidth=2
	au Filetype eruby setlocal expandtab

" }}}

" Vim {{{

augroup ft_vim
	au!

	au FileType vim setlocal foldmethod=marker
	au FileType help setlocal textwidth=78
	au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif

augroup END

" }}}

" }}}
